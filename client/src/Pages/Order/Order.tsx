import { ChangeEvent, useEffect, useState } from 'react';
import styles from './Order.module.css';
import { useAppDispatch, useAppSelector } from '../../redux/hooks';
import type { RootState } from '../../redux/store';
import { fetchOrdersAdd, fetchOrdersEmail, fetchOrdersSendAdmin, fetchOrdersSendClient } from '../../redux/thunkOrders';
import { useNavigate } from 'react-router-dom';

const instanceId = '1103950125';
const token = 'abe7aa900519491a83738877b52343383304ba20ca294636bc';
const chatId = '79823455042@c.us';

type InputsType = {
  name: string;
  phone: string;
  email: string;
  communication: string;
  telegramUsername?: string;
  comment_client: string;
  status: boolean;
  status_collect: boolean;
  comment_admin: string;
};

export default function Order() {
  const navigate = useNavigate();
  const [showConfirmation, setShowConfirmation] = useState(false);
  const [isSubmitting, setIsSubmitting] = useState(false);
  const scriptLoaded = useAppSelector((state: RootState) => state.scriptSlice.loaded);
  const [cartItems, setCartItems] = useState<any[]>([]);
  const [phone, setPhone] = useState('');

  useEffect(() => {
    if (scriptLoaded) {
      initializeCart();
    }
  }, [scriptLoaded])

  useEffect(() => {
    const cartItems = JSON.parse(localStorage.getItem('cart') || '[]');
    // const orderedGoods = localStorage.getItem('cart').map((el) => )
    let modifiedArray = cartItems.map((item) => {
      let newItem = { ...item };
      newItem.count = newItem.quantity;
      newItem.price = newItem.priceDiscount;
      delete newItem.quantity;
      return newItem;
    });

    
    setCartItems(modifiedArray);
  }, []);

  const [inputs, setInputs] = useState<InputsType>({
    name: '',
    phone: '',
    email: '',
    communication: 'phone',
    comment_client: '', // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ–ª–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –ø—É—Å—Ç–æ–π —Å—Ç—Ä–æ–∫–æ–π
    status: false,
    status_collect: false,
    comment_admin: '',
  });

  const dispatch = useAppDispatch();

  const changeHandler = (e: ChangeEvent<HTMLInputElement | HTMLTextAreaElement>): void => {
    const { name, value } = e.target;
    setInputs((prev) => ({ ...prev, [name]: value }));
  };
  
  const handlePhoneChange = (e: ChangeEvent<HTMLInputElement>): void => {
    let formattedPhone = e.target.value.replace(/[^\d+]/g, '');
    if (formattedPhone[0] !== '+') {
      formattedPhone = '+' + formattedPhone.replace(/\+/g, '');
    }
    setInputs((prev) => ({ ...prev, phone: formattedPhone }));
  };

  const submitHandler = async (e: React.FormEvent): Promise<void> => {
    e.preventDefault();
    setIsSubmitting(true);
    const sum = cartItems.reduce((acc, el) => { return acc + el.count * el.priceDiscount }, 0)
    try {
      const orderData = {
        inputs: {
          ...inputs,
          productList: cartItems,
          sum,
          status: false,
          status_collect: false,
          comment_admin: '',
        },
      };
      
      // –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è WhatsApp –ê–î–ú–ò–ù
      const items = cartItems.map((el, index) => `${index + 1}. ${el.name} - ${el.count} —à—Ç. * ${el.priceDiscount} ‚Ç∏ = ${el.count * el.priceDiscount} ‚Ç∏`).join('\n');
      const message = `‚ùó–ù–æ–≤—ã–π –∑–∞–∫–∞–∑ ${sum} ‚Ç∏:
                      \n –ö–ª–∏–µ–Ω—Ç: ${inputs.name}\
                      \n –¢–µ–ª–µ—Ñ–æ–Ω: ${inputs.phone}\
                      \n E-mail: ${inputs.email}\
                      \n C–ø–æ—Å–æ–± —Å–≤—è–∑–∏: ${inputs.communication}\
                      ${inputs.communication === 'telegram' ? `\n –ù–∏–∫ –≤ Telegram: ${inputs.telegramUsername}` : ''}\
                      \n –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: ${inputs.comment_client}
                      \n –°–æ—Å—Ç–∞–≤ –∑–∞–∫–∞–∑–∞:\
                      \n ${items}`;

    const messageToClient = `ü§© –°–ø–∞—Å–∏–±–æ –∑–∞ –í–∞—à –∑–∞–∫–∞–∑. –ú—ã —Å–∫–æ—Ä–æ —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏.  ${sum} ‚Ç∏:
                      \n –ö–ª–∏–µ–Ω—Ç: ${inputs.name}\
                      \n –¢–µ–ª–µ—Ñ–æ–Ω: ${inputs.phone}\
                      \n E-mail: ${inputs.email}\
                      \n C–ø–æ—Å–æ–± —Å–≤—è–∑–∏: ${inputs.communication}\
                      ${inputs.communication === 'telegram' ? `\n –ù–∏–∫ –≤ Telegram: ${inputs.telegramUsername}` : ''}\
                      \n –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: ${inputs.comment_client}
                      \n –°–æ—Å—Ç–∞–≤ –∑–∞–∫–∞–∑–∞:\
                      \n ${items}`;
      
      // –Ω–∞–π—Å—Ç—Ä–æ–∫–∏ –¥–ª—è WhatsApp
      const url = `https://api.green-api.com/waInstance${instanceId}/SendMessage/${token}`;
      const payload = {
        chatId: chatId,
        message: message,
        linkPreview: false,
      };

      const formattedPhone = inputs.phone.replace(/^\+/, ''); // –£–¥–∞–ª—è–µ–º –ø–ª—é—Å –≤ –Ω–∞—á–∞–ª–µ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞

      const payloadClient = {
        chatId: `${formattedPhone}@c.us`,
        message: messageToClient,
        linkPreview: false,
      };
 
      // 1. –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ WhatsApp –¥–ª—è –ê–î–ú–ò–ù–ê
      await dispatch(fetchOrdersSendAdmin({ url, payload }));

      // 2. –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ WhatsApp –¥–ª—è –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø
      await dispatch(fetchOrdersSendClient({ url, payloadClient }));

      // 3. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–∞ email
      const formData = {
        name: inputs.name,
        email: inputs.email,
        html: `
          <p>–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, ${inputs.name},</p>
          <p>–ú—ã –ø–æ–ª—É—á–∏–ª–∏ –≤–∞—à –∑–∞–∫–∞–∑ –∏ –±–ª–∞–≥–æ–¥–∞—Ä–∏–º –∑–∞ –≤–∞—à –≤—ã–±–æ—Ä. –ú—ã —Å–∫–æ—Ä–æ —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π –∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞.</p>
          
          <p><strong>–î–µ—Ç–∞–ª–∏ –≤–∞—à–µ–≥–æ –∑–∞–∫–∞–∑–∞:</strong></p>
          <ul>
            <li><strong>–ò–º—è:</strong> ${inputs.name}</li>
            <li><strong>–¢–µ–ª–µ—Ñ–æ–Ω –¥–ª—è —Å–≤—è–∑–∏:</strong> ${inputs.phone}</li>
            <li><strong>Email:</strong> ${inputs.email}</li>
            <li><strong>–°–ø–æ—Å–æ–± —Å–≤—è–∑–∏:</strong> ${inputs.communication}</li>
            ${inputs.communication === 'telegram' ? `<li><strong>–ù–∏–∫ –≤ Telegram:</strong> ${inputs.telegramUsername}</li>` : ''}
            <li><strong>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∑–∞–∫–∞–∑—É:</strong> ${inputs.comment_client}</li>
          </ul>
          
          <p><strong>–°–æ—Å—Ç–∞–≤ –≤–∞—à–µ–≥–æ –∑–∞–∫–∞–∑–∞:</strong></p>
          <ul>
            ${cartItems.map((item, index) => `<li>${index + 1}. ${item.name} - ${item.count} —à—Ç. * ${item.priceDiscount} ‚Ç∏ = ${item.count * item.priceDiscount} ‚Ç∏</li>`).join('')}
          </ul>
          
          <p><strong>–û–±—â–∞—è —Å—É–º–º–∞ –∑–∞–∫–∞–∑–∞:</strong> ${sum} ‚Ç∏</p>
          
          <p>–° —É–≤–∞–∂–µ–Ω–∏–µ–º,</p>
          <p>–∫–æ–º–∞–Ω–¥–∞ COFFEE BRO</p>
        `,
      };

      // // 4. –°–æ–∑–¥–∞–µ–º –≤ –ë–î –∑–∞–ø–∏—Å—å
      await dispatch(fetchOrdersEmail(formData));

      setIsSubmitting(false);
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –±–ª–æ–∫ —Å —Å–æ–æ–±—â–µ–Ω–∏–µ–º
      setShowConfirmation(true);

      localStorage.removeItem('cart');

       // –ß–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –Ω–∞—á–∞–ª—å–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
       setTimeout(() => {
        navigate('/');
       }, 3000);

        // 3. –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –≤ –ë–î
      await dispatch(fetchOrdersAdd(orderData));

    } catch (error) {
      console.log('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–∫–∞–∑–∞:', error);
    } 
    // finally {
    //   setIsSubmitting(false);
    // }
  };

  return (
    <div>
       
      {!showConfirmation ? (
        <form className={styles.form} onSubmit={submitHandler}>
            <h3 className={styles.h1}>–û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞</h3>
          <div className={styles.formGroup}>
            <label className={styles.text} htmlFor="phone">–¢–µ–ª–µ—Ñ–æ–Ω <span className={styles.required}>*</span></label>
            <input className={styles.input} type="text" onChange={handlePhoneChange} name='phone' value={inputs.phone} required />
            <small>–ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏, —á—Ç–æ–±—ã —Å–æ–≥–ª–∞—Å–æ–≤–∞—Ç—å –∑–∞–∫–∞–∑</small>
          </div>
          <div className={styles.formGroup}>
            <label className={styles.text} htmlFor="email">Email <span className={styles.required}>*</span></label>
            <input type="email" className={styles.input} onChange={changeHandler} name='email' value={inputs.email} required />
          </div>
          <div className={styles.formGroup}>
            <label className={styles.text} htmlFor="communication">–ö–∞–∫ —Å –≤–∞–º–∏ —Å–≤—è–∑–∞—Ç—å—Å—è? <span className={styles.required}>*</span></label>
            <div className={styles.contactMethodGroup}>
              <label className={styles.contactMethodLabel}>
                <input
                  type="radio"
                  name="communication"
                  value="phone"
                  checked={inputs.communication === 'phone'}
                  onChange={changeHandler}
                />
                –¢–µ–ª–µ—Ñ–æ–Ω
              </label>
              <label className={styles.contactMethodLabel}>
                <input
                  type="radio"
                  name="communication"
                  value="whatsapp"
                  checked={inputs.communication === 'whatsapp'}
                  onChange={changeHandler}
                />
                WhatsApp
              </label>
              <label className={styles.contactMethodLabel}>
                <input
                  type="radio"
                  name="communication"
                  value="telegram"
                  checked={inputs.communication === 'telegram'}
                  onChange={changeHandler}
                />
                Telegram
              </label>
            </div>
          </div>
          {inputs.communication === 'telegram' && (
            <div className={styles.formGroup}>
              <label htmlFor="telegramUsername">–ù–∏–∫ –≤ Telegram <span className={styles.required}>*</span></label>
              <input type="text" onChange={changeHandler} name='telegramUsername' value={inputs.telegramUsername || ''} required />
            </div>
          )}
          <div className={styles.formGroup}>
            <label className={styles.text} htmlFor="name">–í–∞—à–µ –∏–º—è –∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏ <span className={styles.required}>*</span></label>
            <input type="text" className={styles.input} onChange={changeHandler} name='name' value={inputs.name} required />
          </div>
          <div className={styles.formGroup}>
            <label className={styles.text} htmlFor="comment_client">–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∑–∞–∫–∞–∑—É</label>
            <textarea name='comment_client' rows={4} onChange={changeHandler} value={inputs.comment_client} />
            <small>–ù–∞–ø—Ä–∏–º–µ—Ä, –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏</small>
          </div>
          <button className={styles.btn2} type="submit">–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–∫–∞–∑</button>
        </form> 
      ) : (
        <div className={styles.confirmationMessage}>
          <p className={styles.h1}>–°–ø–∞—Å–∏–±–æ –∑–∞ –∑–∞–∫–∞–∑! –ú—ã —Å–∫–æ—Ä–æ —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏.</p>
        </div>
      )}
      {isSubmitting && (
        <div className={styles.overlay}>
          <div className={styles.loaderMessage}>–ò–¥–µ—Ç –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞...</div>
        </div>
      )}
    </div>
  );
}
